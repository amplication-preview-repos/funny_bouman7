/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BloodRequest as PrismaBloodRequest } from "@prisma/client";

export class BloodRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BloodRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bloodRequest.count(args);
  }

  async bloodRequests(
    args: Prisma.BloodRequestFindManyArgs
  ): Promise<PrismaBloodRequest[]> {
    return this.prisma.bloodRequest.findMany(args);
  }
  async bloodRequest(
    args: Prisma.BloodRequestFindUniqueArgs
  ): Promise<PrismaBloodRequest | null> {
    return this.prisma.bloodRequest.findUnique(args);
  }
  async createBloodRequest(
    args: Prisma.BloodRequestCreateArgs
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.create(args);
  }
  async updateBloodRequest(
    args: Prisma.BloodRequestUpdateArgs
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.update(args);
  }
  async deleteBloodRequest(
    args: Prisma.BloodRequestDeleteArgs
  ): Promise<PrismaBloodRequest> {
    return this.prisma.bloodRequest.delete(args);
  }
}
