/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BloodRequest } from "./BloodRequest";
import { BloodRequestCountArgs } from "./BloodRequestCountArgs";
import { BloodRequestFindManyArgs } from "./BloodRequestFindManyArgs";
import { BloodRequestFindUniqueArgs } from "./BloodRequestFindUniqueArgs";
import { CreateBloodRequestArgs } from "./CreateBloodRequestArgs";
import { UpdateBloodRequestArgs } from "./UpdateBloodRequestArgs";
import { DeleteBloodRequestArgs } from "./DeleteBloodRequestArgs";
import { BloodRequestService } from "../bloodRequest.service";
@graphql.Resolver(() => BloodRequest)
export class BloodRequestResolverBase {
  constructor(protected readonly service: BloodRequestService) {}

  async _bloodRequestsMeta(
    @graphql.Args() args: BloodRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BloodRequest])
  async bloodRequests(
    @graphql.Args() args: BloodRequestFindManyArgs
  ): Promise<BloodRequest[]> {
    return this.service.bloodRequests(args);
  }

  @graphql.Query(() => BloodRequest, { nullable: true })
  async bloodRequest(
    @graphql.Args() args: BloodRequestFindUniqueArgs
  ): Promise<BloodRequest | null> {
    const result = await this.service.bloodRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BloodRequest)
  async createBloodRequest(
    @graphql.Args() args: CreateBloodRequestArgs
  ): Promise<BloodRequest> {
    return await this.service.createBloodRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BloodRequest)
  async updateBloodRequest(
    @graphql.Args() args: UpdateBloodRequestArgs
  ): Promise<BloodRequest | null> {
    try {
      return await this.service.updateBloodRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BloodRequest)
  async deleteBloodRequest(
    @graphql.Args() args: DeleteBloodRequestArgs
  ): Promise<BloodRequest | null> {
    try {
      return await this.service.deleteBloodRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
