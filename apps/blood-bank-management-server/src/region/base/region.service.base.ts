/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Region as PrismaRegion,
  District as PrismaDistrict,
} from "@prisma/client";

export class RegionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RegionCountArgs, "select">): Promise<number> {
    return this.prisma.region.count(args);
  }

  async regions(args: Prisma.RegionFindManyArgs): Promise<PrismaRegion[]> {
    return this.prisma.region.findMany(args);
  }
  async region(
    args: Prisma.RegionFindUniqueArgs
  ): Promise<PrismaRegion | null> {
    return this.prisma.region.findUnique(args);
  }
  async createRegion(args: Prisma.RegionCreateArgs): Promise<PrismaRegion> {
    return this.prisma.region.create(args);
  }
  async updateRegion(args: Prisma.RegionUpdateArgs): Promise<PrismaRegion> {
    return this.prisma.region.update(args);
  }
  async deleteRegion(args: Prisma.RegionDeleteArgs): Promise<PrismaRegion> {
    return this.prisma.region.delete(args);
  }

  async findDistricts(
    parentId: string,
    args: Prisma.DistrictFindManyArgs
  ): Promise<PrismaDistrict[]> {
    return this.prisma.region
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .districts(args);
  }
}
