/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BloodDonationService } from "../bloodDonation.service";
import { BloodDonationCreateInput } from "./BloodDonationCreateInput";
import { BloodDonation } from "./BloodDonation";
import { BloodDonationFindManyArgs } from "./BloodDonationFindManyArgs";
import { BloodDonationWhereUniqueInput } from "./BloodDonationWhereUniqueInput";
import { BloodDonationUpdateInput } from "./BloodDonationUpdateInput";

export class BloodDonationControllerBase {
  constructor(protected readonly service: BloodDonationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BloodDonation })
  async createBloodDonation(
    @common.Body() data: BloodDonationCreateInput
  ): Promise<BloodDonation> {
    return await this.service.createBloodDonation({
      data: data,
      select: {
        bloodType: true,
        createdAt: true,
        donationDate: true,
        donor: true,
        id: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BloodDonation] })
  @ApiNestedQuery(BloodDonationFindManyArgs)
  async bloodDonations(
    @common.Req() request: Request
  ): Promise<BloodDonation[]> {
    const args = plainToClass(BloodDonationFindManyArgs, request.query);
    return this.service.bloodDonations({
      ...args,
      select: {
        bloodType: true,
        createdAt: true,
        donationDate: true,
        donor: true,
        id: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BloodDonation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bloodDonation(
    @common.Param() params: BloodDonationWhereUniqueInput
  ): Promise<BloodDonation | null> {
    const result = await this.service.bloodDonation({
      where: params,
      select: {
        bloodType: true,
        createdAt: true,
        donationDate: true,
        donor: true,
        id: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BloodDonation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBloodDonation(
    @common.Param() params: BloodDonationWhereUniqueInput,
    @common.Body() data: BloodDonationUpdateInput
  ): Promise<BloodDonation | null> {
    try {
      return await this.service.updateBloodDonation({
        where: params,
        data: data,
        select: {
          bloodType: true,
          createdAt: true,
          donationDate: true,
          donor: true,
          id: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BloodDonation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBloodDonation(
    @common.Param() params: BloodDonationWhereUniqueInput
  ): Promise<BloodDonation | null> {
    try {
      return await this.service.deleteBloodDonation({
        where: params,
        select: {
          bloodType: true,
          createdAt: true,
          donationDate: true,
          donor: true,
          id: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
