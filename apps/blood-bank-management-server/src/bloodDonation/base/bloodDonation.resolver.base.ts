/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BloodDonation } from "./BloodDonation";
import { BloodDonationCountArgs } from "./BloodDonationCountArgs";
import { BloodDonationFindManyArgs } from "./BloodDonationFindManyArgs";
import { BloodDonationFindUniqueArgs } from "./BloodDonationFindUniqueArgs";
import { CreateBloodDonationArgs } from "./CreateBloodDonationArgs";
import { UpdateBloodDonationArgs } from "./UpdateBloodDonationArgs";
import { DeleteBloodDonationArgs } from "./DeleteBloodDonationArgs";
import { BloodDonationService } from "../bloodDonation.service";
@graphql.Resolver(() => BloodDonation)
export class BloodDonationResolverBase {
  constructor(protected readonly service: BloodDonationService) {}

  async _bloodDonationsMeta(
    @graphql.Args() args: BloodDonationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BloodDonation])
  async bloodDonations(
    @graphql.Args() args: BloodDonationFindManyArgs
  ): Promise<BloodDonation[]> {
    return this.service.bloodDonations(args);
  }

  @graphql.Query(() => BloodDonation, { nullable: true })
  async bloodDonation(
    @graphql.Args() args: BloodDonationFindUniqueArgs
  ): Promise<BloodDonation | null> {
    const result = await this.service.bloodDonation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BloodDonation)
  async createBloodDonation(
    @graphql.Args() args: CreateBloodDonationArgs
  ): Promise<BloodDonation> {
    return await this.service.createBloodDonation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BloodDonation)
  async updateBloodDonation(
    @graphql.Args() args: UpdateBloodDonationArgs
  ): Promise<BloodDonation | null> {
    try {
      return await this.service.updateBloodDonation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BloodDonation)
  async deleteBloodDonation(
    @graphql.Args() args: DeleteBloodDonationArgs
  ): Promise<BloodDonation | null> {
    try {
      return await this.service.deleteBloodDonation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
