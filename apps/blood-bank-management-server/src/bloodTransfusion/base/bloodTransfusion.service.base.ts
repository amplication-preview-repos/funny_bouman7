/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BloodTransfusion as PrismaBloodTransfusion,
  Facility as PrismaFacility,
} from "@prisma/client";

export class BloodTransfusionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BloodTransfusionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bloodTransfusion.count(args);
  }

  async bloodTransfusions(
    args: Prisma.BloodTransfusionFindManyArgs
  ): Promise<PrismaBloodTransfusion[]> {
    return this.prisma.bloodTransfusion.findMany(args);
  }
  async bloodTransfusion(
    args: Prisma.BloodTransfusionFindUniqueArgs
  ): Promise<PrismaBloodTransfusion | null> {
    return this.prisma.bloodTransfusion.findUnique(args);
  }
  async createBloodTransfusion(
    args: Prisma.BloodTransfusionCreateArgs
  ): Promise<PrismaBloodTransfusion> {
    return this.prisma.bloodTransfusion.create(args);
  }
  async updateBloodTransfusion(
    args: Prisma.BloodTransfusionUpdateArgs
  ): Promise<PrismaBloodTransfusion> {
    return this.prisma.bloodTransfusion.update(args);
  }
  async deleteBloodTransfusion(
    args: Prisma.BloodTransfusionDeleteArgs
  ): Promise<PrismaBloodTransfusion> {
    return this.prisma.bloodTransfusion.delete(args);
  }

  async getFacility(parentId: string): Promise<PrismaFacility | null> {
    return this.prisma.bloodTransfusion
      .findUnique({
        where: { id: parentId },
      })
      .facility();
  }
}
