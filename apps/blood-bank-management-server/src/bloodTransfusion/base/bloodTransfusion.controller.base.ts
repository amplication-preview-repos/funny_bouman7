/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BloodTransfusionService } from "../bloodTransfusion.service";
import { BloodTransfusionCreateInput } from "./BloodTransfusionCreateInput";
import { BloodTransfusion } from "./BloodTransfusion";
import { BloodTransfusionFindManyArgs } from "./BloodTransfusionFindManyArgs";
import { BloodTransfusionWhereUniqueInput } from "./BloodTransfusionWhereUniqueInput";
import { BloodTransfusionUpdateInput } from "./BloodTransfusionUpdateInput";

export class BloodTransfusionControllerBase {
  constructor(protected readonly service: BloodTransfusionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BloodTransfusion })
  async createBloodTransfusion(
    @common.Body() data: BloodTransfusionCreateInput
  ): Promise<BloodTransfusion> {
    return await this.service.createBloodTransfusion({
      data: {
        ...data,

        facility: data.facility
          ? {
              connect: data.facility,
            }
          : undefined,
      },
      select: {
        bloodType: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        patient: true,
        quantity: true,
        transfusionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BloodTransfusion] })
  @ApiNestedQuery(BloodTransfusionFindManyArgs)
  async bloodTransfusions(
    @common.Req() request: Request
  ): Promise<BloodTransfusion[]> {
    const args = plainToClass(BloodTransfusionFindManyArgs, request.query);
    return this.service.bloodTransfusions({
      ...args,
      select: {
        bloodType: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        patient: true,
        quantity: true,
        transfusionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BloodTransfusion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bloodTransfusion(
    @common.Param() params: BloodTransfusionWhereUniqueInput
  ): Promise<BloodTransfusion | null> {
    const result = await this.service.bloodTransfusion({
      where: params,
      select: {
        bloodType: true,
        createdAt: true,

        facility: {
          select: {
            id: true,
          },
        },

        id: true,
        patient: true,
        quantity: true,
        transfusionDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BloodTransfusion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBloodTransfusion(
    @common.Param() params: BloodTransfusionWhereUniqueInput,
    @common.Body() data: BloodTransfusionUpdateInput
  ): Promise<BloodTransfusion | null> {
    try {
      return await this.service.updateBloodTransfusion({
        where: params,
        data: {
          ...data,

          facility: data.facility
            ? {
                connect: data.facility,
              }
            : undefined,
        },
        select: {
          bloodType: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,
          patient: true,
          quantity: true,
          transfusionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BloodTransfusion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBloodTransfusion(
    @common.Param() params: BloodTransfusionWhereUniqueInput
  ): Promise<BloodTransfusion | null> {
    try {
      return await this.service.deleteBloodTransfusion({
        where: params,
        select: {
          bloodType: true,
          createdAt: true,

          facility: {
            select: {
              id: true,
            },
          },

          id: true,
          patient: true,
          quantity: true,
          transfusionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
