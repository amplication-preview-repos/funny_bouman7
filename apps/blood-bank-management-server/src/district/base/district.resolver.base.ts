/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { District } from "./District";
import { DistrictCountArgs } from "./DistrictCountArgs";
import { DistrictFindManyArgs } from "./DistrictFindManyArgs";
import { DistrictFindUniqueArgs } from "./DistrictFindUniqueArgs";
import { CreateDistrictArgs } from "./CreateDistrictArgs";
import { UpdateDistrictArgs } from "./UpdateDistrictArgs";
import { DeleteDistrictArgs } from "./DeleteDistrictArgs";
import { WardFindManyArgs } from "../../ward/base/WardFindManyArgs";
import { Ward } from "../../ward/base/Ward";
import { Region } from "../../region/base/Region";
import { DistrictService } from "../district.service";
@graphql.Resolver(() => District)
export class DistrictResolverBase {
  constructor(protected readonly service: DistrictService) {}

  async _districtsMeta(
    @graphql.Args() args: DistrictCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [District])
  async districts(
    @graphql.Args() args: DistrictFindManyArgs
  ): Promise<District[]> {
    return this.service.districts(args);
  }

  @graphql.Query(() => District, { nullable: true })
  async district(
    @graphql.Args() args: DistrictFindUniqueArgs
  ): Promise<District | null> {
    const result = await this.service.district(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => District)
  async createDistrict(
    @graphql.Args() args: CreateDistrictArgs
  ): Promise<District> {
    return await this.service.createDistrict({
      ...args,
      data: {
        ...args.data,

        region: args.data.region
          ? {
              connect: args.data.region,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => District)
  async updateDistrict(
    @graphql.Args() args: UpdateDistrictArgs
  ): Promise<District | null> {
    try {
      return await this.service.updateDistrict({
        ...args,
        data: {
          ...args.data,

          region: args.data.region
            ? {
                connect: args.data.region,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => District)
  async deleteDistrict(
    @graphql.Args() args: DeleteDistrictArgs
  ): Promise<District | null> {
    try {
      return await this.service.deleteDistrict(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Ward], { name: "wards" })
  async findWards(
    @graphql.Parent() parent: District,
    @graphql.Args() args: WardFindManyArgs
  ): Promise<Ward[]> {
    const results = await this.service.findWards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Region, {
    nullable: true,
    name: "region",
  })
  async getRegion(@graphql.Parent() parent: District): Promise<Region | null> {
    const result = await this.service.getRegion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
