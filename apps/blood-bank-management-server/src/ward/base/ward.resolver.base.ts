/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ward } from "./Ward";
import { WardCountArgs } from "./WardCountArgs";
import { WardFindManyArgs } from "./WardFindManyArgs";
import { WardFindUniqueArgs } from "./WardFindUniqueArgs";
import { CreateWardArgs } from "./CreateWardArgs";
import { UpdateWardArgs } from "./UpdateWardArgs";
import { DeleteWardArgs } from "./DeleteWardArgs";
import { HospitalFindManyArgs } from "../../hospital/base/HospitalFindManyArgs";
import { Hospital } from "../../hospital/base/Hospital";
import { District } from "../../district/base/District";
import { WardService } from "../ward.service";
@graphql.Resolver(() => Ward)
export class WardResolverBase {
  constructor(protected readonly service: WardService) {}

  async _wardsMeta(
    @graphql.Args() args: WardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ward])
  async wards(@graphql.Args() args: WardFindManyArgs): Promise<Ward[]> {
    return this.service.wards(args);
  }

  @graphql.Query(() => Ward, { nullable: true })
  async ward(@graphql.Args() args: WardFindUniqueArgs): Promise<Ward | null> {
    const result = await this.service.ward(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ward)
  async createWard(@graphql.Args() args: CreateWardArgs): Promise<Ward> {
    return await this.service.createWard({
      ...args,
      data: {
        ...args.data,

        district: args.data.district
          ? {
              connect: args.data.district,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Ward)
  async updateWard(@graphql.Args() args: UpdateWardArgs): Promise<Ward | null> {
    try {
      return await this.service.updateWard({
        ...args,
        data: {
          ...args.data,

          district: args.data.district
            ? {
                connect: args.data.district,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ward)
  async deleteWard(@graphql.Args() args: DeleteWardArgs): Promise<Ward | null> {
    try {
      return await this.service.deleteWard(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Hospital], { name: "hospitals" })
  async findHospitals(
    @graphql.Parent() parent: Ward,
    @graphql.Args() args: HospitalFindManyArgs
  ): Promise<Hospital[]> {
    const results = await this.service.findHospitals(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => District, {
    nullable: true,
    name: "district",
  })
  async getDistrict(@graphql.Parent() parent: Ward): Promise<District | null> {
    const result = await this.service.getDistrict(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
